basePath: /
definitions:
  handlers.AuthErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  handlers.ChangePasswordRequest:
    properties:
      password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  handlers.LoginResponse:
    properties:
      access_token:
        type: string
      message:
        type: string
      refresh_token:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - fullname
    - password
    type: object
  handlers.SendEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  handlers.TokenPayload:
    properties:
      email:
        type: string
      exp:
        type: integer
      iat:
        type: integer
      role:
        type: string
      sub:
        type: string
      token_type: {}
      user_id:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Authentication API
  title: Authentication API
  version: "1.0"
paths:
  /api/v1/auth/change/password:
    put:
      consumes:
      - application/json
      description: Change password for user who forget their password
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
      summary: Change password
      tags:
      - auth
  /api/v1/auth/forget/password:
    post:
      consumes:
      - application/json
      description: Send email to user
      parameters:
      - description: Send email request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SendEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
      summary: Send email
      tags:
      - auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access & refresh tokens
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
      summary: User login
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
      summary: Register new user
      tags:
      - auth
  /api/v1/protected:
    get:
      consumes:
      - application/json
      description: Example of a protected route that requires authentication
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TokenPayload'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthErrorResponse'
      security:
      - BearerAuth: []
      summary: Protected route
      tags:
      - protected
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
