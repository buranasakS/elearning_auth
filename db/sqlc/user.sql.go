// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT id, email, fullname FROM users WHERE email = $1
`

type CheckEmailExistsRow struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Fullname string      `json:"fullname"`
}

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (CheckEmailExistsRow, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var i CheckEmailExistsRow
	err := row.Scan(&i.ID, &i.Email, &i.Fullname)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (fullname, email, password, role)
VALUES ($1, $2, $3, $4)
RETURNING id, fullname, email, password, role, created_at, updated_at
`

type CreateUserParams struct {
	Fullname string `json:"fullname"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fullname,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserDetail = `-- name: GetUserDetail :one
SELECT id, email, fullname, role FROM users WHERE id = $1
`

type GetUserDetailRow struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Fullname string      `json:"fullname"`
	Role     string      `json:"role"`
}

func (q *Queries) GetUserDetail(ctx context.Context, id pgtype.UUID) (GetUserDetailRow, error) {
	row := q.db.QueryRow(ctx, getUserDetail, id)
	var i GetUserDetailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Role,
	)
	return i, err
}

const getUserForLogin = `-- name: GetUserForLogin :one
SELECT id, email, fullname, password, role FROM users WHERE email = $1 LIMIT 1
`

type GetUserForLoginRow struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Fullname string      `json:"fullname"`
	Password string      `json:"password"`
	Role     string      `json:"role"`
}

func (q *Queries) GetUserForLogin(ctx context.Context, email string) (GetUserForLoginRow, error) {
	row := q.db.QueryRow(ctx, getUserForLogin, email)
	var i GetUserForLoginRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users 
SET password = $2, updated_at = NOW()
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       pgtype.UUID `json:"id"`
	Password string      `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password)
	return err
}
